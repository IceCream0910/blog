import { WithPartialCoords, LinkWithPartialCoords, WithCoords, Node, LinkWithCoords, KnowledgeGraphOptions } from "./types";
import { GraphEventEmitter } from "./graphEvents";
export declare class KnowledgeGraph<N extends WithPartialCoords<Node> = WithPartialCoords<Node>, L extends LinkWithPartialCoords = LinkWithPartialCoords> {
    private nodes;
    private links;
    private app;
    private viewport;
    private graphWorker;
    private conditionalNodeLabelsRenderer;
    private lineGraphicsContainer;
    private circleNodesContainer;
    private circleNodesShadowContainer;
    /**
     * whether all the necessary steps for a fully functional, interactive graph
     * have been completed
     */
    private culler;
    private options;
    private db;
    private interaction;
    graphEventEmitter: GraphEventEmitter<WithCoords<N>, LinkWithCoords<L>>;
    isLoaded: Readonly<boolean>;
    private zoomLevels?;
    constructor({ nodes, links, canvasElement, options, }: {
        nodes: N[];
        links: L[];
        /**
         * if you want to access it later, use this.app. to do sos
         */
        canvasElement: HTMLCanvasElement;
        options?: KnowledgeGraphOptions<N, L>;
    });
    private setupConditionalNodeLabelsRenderer;
    private updateLinks;
    private updateNodes;
    private addChildrenToCircleContainers;
    createNetworkGraph(): void;
    moveTo(coords: Pick<N, `x` | `y`>): void;
}
