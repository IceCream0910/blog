import { Viewport } from "pixi-viewport";
import * as PIXI from "pixi.js";
import { Container } from "pixi.js";
import { GraphEventEmitter } from "./graphEvents";
import { Node, KnowledgeGraphOptions, WithCoords, LinkWithCoords, Link } from "./types";
export declare type InteractionState = {
    mousedownNodeId?: Node[`id`];
    prevHighlightedLinkIndices: {
        mousedown: number[];
        mouseover: number[];
    };
};
export declare type InteractionColors = {
    selected?: number;
    children?: number;
};
export declare class GraphInteraction<N extends WithCoords<Node>, L extends LinkWithCoords<Link>> {
    private options;
    private selectedCircleOutlineFeedback;
    private nodes;
    private app;
    private links;
    private lineGraphicsContainer;
    private linkedNodesContainer;
    private graphEventEmitter;
    private interactionState;
    private colors;
    private isGraphLayoutLoaded;
    constructor({ options, app, viewport, lineGraphicsContainer, nodes, links, colors, graphEventEmitter, }: {
        options: KnowledgeGraphOptions<N, L>;
        app: PIXI.Application;
        viewport: Viewport;
        nodes: N[];
        links: L[];
        lineGraphicsContainer: Container;
        graphEventEmitter: GraphEventEmitter<N, L>;
        colors?: Required<InteractionColors>;
    });
    updateNodesAndLinks({ nodes, links }: {
        nodes?: N[];
        links?: L[];
    }): void;
    private turnOffHighlightInPreviousLinks;
    private turnOnHighlightInCurrentLinks;
    private showSelectedCircleOutlineFeedback;
    private findLinkedNodes;
    private highlightLinkedNodes;
    addEventListenersToCircle(normalContainerCircle: PIXI.Sprite, node: N): void;
}
