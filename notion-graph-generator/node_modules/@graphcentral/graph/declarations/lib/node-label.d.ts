import * as PIXI from "pixi.js";
import { CustomFontConfig, Node, WithCoords } from "./types";
/**
 *  not included as a private function because
 * it cannot be called before `super` call in the class
 */
export declare class NodeLabelHelper {
    static plainBitmapFontConfigs: [
        Parameters<typeof PIXI.BitmapFont[`from`]>[1],
        Parameters<typeof PIXI.BitmapFont[`from`]>[2]
    ];
    protected static customFontConfig?: PIXI.TextStyle | Partial<PIXI.ITextStyle>;
    protected static customFontOptions?: PIXI.IBitmapFontOptions;
    static MAX_NODE_TITLE_LENGTH: number;
    static CUSTOM_FONT_NAME: Readonly<string>;
    static CJKRegex: RegExp;
    /**
     * This needs to be called before creating any `NodeLabel`
     * @param customFont custom font info (i.e. font family)
     * @param customFontOptions custom font configurations
     * @returns BitmapFont
     */
    static installCustomFont(customFont?: PIXI.TextStyle | Partial<PIXI.ITextStyle>, customFontOptions?: PIXI.IBitmapFontOptions): PIXI.BitmapFont;
    static installDefaultFont(): PIXI.BitmapFont;
    static installMaybeCustomFont(customFontConfig?: CustomFontConfig): void;
    static containsCJK(text: string): boolean;
    static getMaybeShortenedTitle(text: string): string;
    static createNodeLabel<N extends Node = Node>(text: string, nodeData: WithCoords<N>): VectorNodeLabel<N> | BitmapNodeLabel<N>;
}
declare abstract class NodeLabel<N> {
    abstract getNodeData(): WithCoords<N>;
}
export declare class BitmapNodeLabel<N> extends PIXI.BitmapText implements NodeLabel<N> {
    private nodeData;
    constructor(text: string, nodeData: WithCoords<N>, cc: number);
    getNodeData(): WithCoords<N>;
}
export declare class VectorNodeLabel<N> extends PIXI.Text implements NodeLabel<N> {
    private nodeData;
    constructor(text: string, nodeData: WithCoords<N>, cc: number, customFontConfig: NonNullable<CustomFontConfig>[`config`], customFontOptions: NonNullable<CustomFontConfig>[`option`]);
    getNodeData(): WithCoords<N>;
}
export {};
